[{"C:\\rep\\dapp-client\\src\\index.js":"1","C:\\rep\\dapp-client\\src\\App.js":"2","C:\\rep\\dapp-client\\src\\reportWebVitals.js":"3","C:\\rep\\dapp-client\\src\\blockchain\\index.js":"4","C:\\rep\\dapp-client\\src\\store\\index.js":"5","C:\\rep\\dapp-client\\src\\components\\GameContainer\\index.js":"6","C:\\rep\\dapp-client\\src\\store\\ducks\\memory.js":"7","C:\\rep\\dapp-client\\src\\store\\ducks\\index.js":"8","C:\\rep\\dapp-client\\src\\components\\CardBoard\\index.js":"9"},{"size":547,"mtime":1644762556621,"results":"10","hashOfConfig":"11"},{"size":427,"mtime":1645240153166,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2963,"mtime":1645288519753,"results":"14","hashOfConfig":"11"},{"size":144,"mtime":1644712806355,"results":"15","hashOfConfig":"11"},{"size":1379,"mtime":1645372734984,"results":"16","hashOfConfig":"11"},{"size":2019,"mtime":1644713809526,"results":"17","hashOfConfig":"11"},{"size":128,"mtime":1644712741178,"results":"18","hashOfConfig":"11"},{"size":2003,"mtime":1644764485453,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s15gjq",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"C:\\rep\\dapp-client\\src\\index.js",[],"C:\\rep\\dapp-client\\src\\App.js",[],"C:\\rep\\dapp-client\\src\\reportWebVitals.js",[],"C:\\rep\\dapp-client\\src\\blockchain\\index.js",["41"],"import React, { useState, useContext } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport MemoryToken from \"./contracts/MemoryToken.json\";\r\n\r\nconst BlockchainContext = React.createContext();\r\n\r\nexport default BlockchainContext;\r\n\r\nexport const BlockchainProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [account, setAccount] = useState();\r\n  const [balance, setBalance] = useState(0);\r\n  // meu contrato\r\n  const [token, setToken] = useState();\r\n  // NFTs\r\n  const [myTokens, setMyTokens] = useState([]);\r\n\r\n  const loadWeb3 = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        await window.ethereum.enable();\r\n        return true;\r\n      } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        return true;\r\n      } else {\r\n        window.alert(\r\n          \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      window.alert(\"Error on login into your Wallet\", err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const getMyTokensFromBlockchain = async (token, account) => {\r\n    let balanceOf = await token.methods.balanceOf(account).call();\r\n\r\n    const blockchainTokens = [];\r\n    for (let i = 0; i < balanceOf; i++) {\r\n      const id = await token.methods.tokenOfOwnerByIndex(account, i).call();\r\n      const tokenURI = await token.methods.tokenURI(id).call();\r\n      blockchainTokens.push(tokenURI);\r\n    }\r\n    setMyTokens(blockchainTokens);\r\n  };\r\n\r\n  async function doLogin() {\r\n    if (await loadWeb3()) {\r\n      await loadBlockchainData();\r\n      setIsAuthenticated(true);\r\n    }\r\n  }\r\n\r\n  const doMint = async (tokenURI, events) => {};\r\n\r\n  const loadBlockchainData = async () => {\r\n    const web3 = window.web3;\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    setAccount(accounts[0]);\r\n\r\n    // Load smart contract\r\n    const networkId = await web3.eth.net.getId();\r\n    const networkData = MemoryToken.networks[networkId];\r\n\r\n    if (networkData) {\r\n      const abi = MemoryToken.abi;\r\n      const address = networkData.address;\r\n\r\n      const balance = web3.utils.fromWei(\r\n        await web3.eth.getBalance(address),\r\n        \"ether\"\r\n      );\r\n      const _token = new web3.eth.Contract(abi, address);\r\n\r\n      setToken(_token);\r\n      setBalance(balance);\r\n\r\n      await getMyTokensFromBlockchain(_token, accounts[0]);\r\n    } else {\r\n      alert(\"Smart contrat not deployed to detected network.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BlockchainContext.Provider\r\n      value={{\r\n        isLoged: isAuthenticated,\r\n        account,\r\n        balance,\r\n        myTokens,\r\n        getMyTokensFromBlockchain,\r\n        doLogin,\r\n        doMint,\r\n      }}\r\n    >\r\n      {children}\r\n    </BlockchainContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useBlockChain() {\r\n  return useContext(BlockchainContext);\r\n}\r\n","C:\\rep\\dapp-client\\src\\store\\index.js",[],"C:\\rep\\dapp-client\\src\\components\\GameContainer\\index.js",["42","43","44","45"],"import { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Creators as MemoryActions } from \"../../store/ducks/memory\";\r\nimport React from \"react\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\nimport CardBoard from \"../CardBoard\";\r\n\r\nimport { useBlockChain } from \"../../blockchain\";\r\n\r\nconst GameContainer = (props) => {\r\n  const { isLoged, account, balance, doLogin, doMint, myTokens } =\r\n    useBlockChain();\r\n\r\n  const handleLogin = async () => {\r\n    await doLogin();\r\n  };\r\n\r\n  const handleOnWonCard = (cardId, cardUrl) => {\r\n    console.log(cardId);\r\n    console.log(cardUrl);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <h2 className=\"text-center\" style={{ padding: \"20px\" }}>\r\n          Memory Game\r\n        </h2>\r\n      </Row>\r\n      {!isLoged ? (\r\n        <Row>\r\n          <Button onClick={handleLogin}>Login</Button>\r\n        </Row>\r\n      ) : (\r\n        <Row>\r\n          <Col md={{ span: 4, offset: 4 }}>\r\n            <CardBoard {...props} onWonCard={handleOnWonCard}></CardBoard>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  memory: state.memory,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(MemoryActions, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameContainer);\r\n","C:\\rep\\dapp-client\\src\\store\\ducks\\memory.js",[],"C:\\rep\\dapp-client\\src\\store\\ducks\\index.js",[],"C:\\rep\\dapp-client\\src\\components\\CardBoard\\index.js",["46","47"],"import React, { useEffect } from \"react\";\r\n\r\nconst CardBoard = (props) => {\r\n  const { flipCard, clearChosenCards, setWonCard, onWonCard } = props;\r\n  const { cardData, cardsWon, cardsChosenId, cardsChosen } = props.memory;\r\n\r\n  const chooseImage = (cardId) => {\r\n    const cardIdStr = cardId.toString();\r\n\r\n    if (cardsWon.includes(cardIdStr)) {\r\n      return window.location.origin + \"/images/white.png\";\r\n    } else if (cardsChosenId.includes(cardIdStr)) {\r\n      return cardData[cardIdStr].img;\r\n    } else {\r\n      return window.location.origin + \"/images/blank.png\";\r\n    }\r\n  };\r\n\r\n  const checkAlreadyWonCard = (cardId) => cardsWon.includes(cardId);\r\n\r\n  const handleFlipCard = (cardId) => flipCard(cardId);\r\n\r\n  const handleOnWonCard = (cardId, cardImage) => {\r\n    if (onWonCard !== undefined) {\r\n      const cardUrl = window.location.origin + cardImage;\r\n      onWonCard(cardId, cardUrl);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let alreadyChosen = cardsChosen.length;\r\n    if (alreadyChosen === 2) {\r\n      checkForMatch();\r\n    }\r\n  }, [cardsChosen]);\r\n\r\n  const checkForMatch = async () => {\r\n    const optionOneId = cardsChosenId[0];\r\n    const optionTwoId = cardsChosenId[1];\r\n\r\n    if (optionOneId === optionTwoId) {\r\n      alert(\"Você já selecionou esta imagem!\");\r\n    } else if (cardsChosen[0] === cardsChosen[1]) {\r\n      alert(\"Você encontrou uma combinação!\");\r\n\r\n      setWonCard(optionOneId, optionTwoId);\r\n      handleOnWonCard(optionOneId, cardData[optionOneId].img);\r\n    } else {\r\n      alert(\"Desculpe, tente novamente!\");\r\n    }\r\n    clearChosenCards();\r\n  };\r\n\r\n  return cardData.map((card, key) => {\r\n    return (\r\n      <img\r\n        key={key}\r\n        src={chooseImage(key)}\r\n        data-id={key}\r\n        onClick={(event) => {\r\n          let cardId = event.target.getAttribute(\"data-id\");\r\n\r\n          if (!checkAlreadyWonCard(cardId)) {\r\n            handleFlipCard(cardId);\r\n          }\r\n        }}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default CardBoard;\r\n",{"ruleId":"48","severity":1,"message":"49","line":14,"column":10,"nodeType":"50","messageId":"51","endLine":14,"endColumn":15},{"ruleId":"48","severity":1,"message":"52","line":11,"column":20,"nodeType":"50","messageId":"51","endLine":11,"endColumn":27},{"ruleId":"48","severity":1,"message":"53","line":11,"column":29,"nodeType":"50","messageId":"51","endLine":11,"endColumn":36},{"ruleId":"48","severity":1,"message":"54","line":11,"column":47,"nodeType":"50","messageId":"51","endLine":11,"endColumn":53},{"ruleId":"48","severity":1,"message":"55","line":11,"column":55,"nodeType":"50","messageId":"51","endLine":11,"endColumn":63},{"ruleId":"56","severity":1,"message":"57","line":35,"column":6,"nodeType":"58","endLine":35,"endColumn":19,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":56,"column":7,"nodeType":"62","endLine":67,"endColumn":9},"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'account' is assigned a value but never used.","'balance' is assigned a value but never used.","'doMint' is assigned a value but never used.","'myTokens' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkForMatch'. Either include it or remove the dependency array.","ArrayExpression",["63"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"64","fix":"65"},"Update the dependencies array to be: [cardsChosen, checkForMatch]",{"range":"66","text":"67"},[1051,1064],"[cardsChosen, checkForMatch]"]