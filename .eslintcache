[{"C:\\rep\\dapp-client\\src\\index.js":"1","C:\\rep\\dapp-client\\src\\App.js":"2","C:\\rep\\dapp-client\\src\\reportWebVitals.js":"3","C:\\rep\\dapp-client\\src\\blockchain\\index.js":"4","C:\\rep\\dapp-client\\src\\store\\index.js":"5","C:\\rep\\dapp-client\\src\\components\\GameContainer\\index.js":"6","C:\\rep\\dapp-client\\src\\store\\ducks\\memory.js":"7","C:\\rep\\dapp-client\\src\\store\\ducks\\index.js":"8","C:\\rep\\dapp-client\\src\\components\\CardBoard\\index.js":"9","C:\\rep\\dapp-client\\src\\components\\CardListView\\index.js":"10"},{"size":547,"mtime":1644762556621,"results":"11","hashOfConfig":"12"},{"size":427,"mtime":1645240153166,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":3836,"mtime":1645884566662,"results":"15","hashOfConfig":"12"},{"size":144,"mtime":1644712806355,"results":"16","hashOfConfig":"12"},{"size":2149,"mtime":1645885200880,"results":"17","hashOfConfig":"12"},{"size":2019,"mtime":1644713809526,"results":"18","hashOfConfig":"12"},{"size":128,"mtime":1644712741178,"results":"19","hashOfConfig":"12"},{"size":2003,"mtime":1644764485453,"results":"20","hashOfConfig":"12"},{"size":397,"mtime":1645374049366,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1s15gjq",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\rep\\dapp-client\\src\\index.js",[],["45","46"],"C:\\rep\\dapp-client\\src\\App.js",[],"C:\\rep\\dapp-client\\src\\reportWebVitals.js",[],"C:\\rep\\dapp-client\\src\\blockchain\\index.js",["47"],"C:\\rep\\dapp-client\\src\\store\\index.js",[],"C:\\rep\\dapp-client\\src\\components\\GameContainer\\index.js",["48","49"],"C:\\rep\\dapp-client\\src\\store\\ducks\\memory.js",[],"C:\\rep\\dapp-client\\src\\store\\ducks\\index.js",[],"C:\\rep\\dapp-client\\src\\components\\CardBoard\\index.js",["50","51"],"import React, { useEffect } from \"react\";\r\n\r\nconst CardBoard = (props) => {\r\n  const { flipCard, clearChosenCards, setWonCard, onWonCard } = props;\r\n  const { cardData, cardsWon, cardsChosenId, cardsChosen } = props.memory;\r\n\r\n  const chooseImage = (cardId) => {\r\n    const cardIdStr = cardId.toString();\r\n\r\n    if (cardsWon.includes(cardIdStr)) {\r\n      return window.location.origin + \"/images/white.png\";\r\n    } else if (cardsChosenId.includes(cardIdStr)) {\r\n      return cardData[cardIdStr].img;\r\n    } else {\r\n      return window.location.origin + \"/images/blank.png\";\r\n    }\r\n  };\r\n\r\n  const checkAlreadyWonCard = (cardId) => cardsWon.includes(cardId);\r\n\r\n  const handleFlipCard = (cardId) => flipCard(cardId);\r\n\r\n  const handleOnWonCard = (cardId, cardImage) => {\r\n    if (onWonCard !== undefined) {\r\n      const cardUrl = window.location.origin + cardImage;\r\n      onWonCard(cardId, cardUrl);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let alreadyChosen = cardsChosen.length;\r\n    if (alreadyChosen === 2) {\r\n      checkForMatch();\r\n    }\r\n  }, [cardsChosen]);\r\n\r\n  const checkForMatch = async () => {\r\n    const optionOneId = cardsChosenId[0];\r\n    const optionTwoId = cardsChosenId[1];\r\n\r\n    if (optionOneId === optionTwoId) {\r\n      alert(\"Você já selecionou esta imagem!\");\r\n    } else if (cardsChosen[0] === cardsChosen[1]) {\r\n      alert(\"Você encontrou uma combinação!\");\r\n\r\n      setWonCard(optionOneId, optionTwoId);\r\n      handleOnWonCard(optionOneId, cardData[optionOneId].img);\r\n    } else {\r\n      alert(\"Desculpe, tente novamente!\");\r\n    }\r\n    clearChosenCards();\r\n  };\r\n\r\n  return cardData.map((card, key) => {\r\n    return (\r\n      <img\r\n        key={key}\r\n        src={chooseImage(key)}\r\n        data-id={key}\r\n        onClick={(event) => {\r\n          let cardId = event.target.getAttribute(\"data-id\");\r\n\r\n          if (!checkAlreadyWonCard(cardId)) {\r\n            handleFlipCard(cardId);\r\n          }\r\n        }}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default CardBoard;\r\n","C:\\rep\\dapp-client\\src\\components\\CardListView\\index.js",["52"],"const CardListView = (props) => {\r\n  const { tokens } = props;\r\n\r\n  return (\r\n    <div>\r\n      <h5>\r\n        Tokens Collected: <span id=\"result\">&nbsp;{tokens.length}</span>\r\n      </h5>\r\n      <div className=\"grid mb-4\">\r\n        {tokens.map((tokenURI, key) => {\r\n          return <img key={key} src={tokenURI} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardListView\r\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":61,"column":11,"nodeType":"59","messageId":"60","endLine":61,"endColumn":15},{"ruleId":"57","severity":1,"message":"61","line":12,"column":20,"nodeType":"59","messageId":"60","endLine":12,"endColumn":27},{"ruleId":"57","severity":1,"message":"62","line":12,"column":29,"nodeType":"59","messageId":"60","endLine":12,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":35,"column":6,"nodeType":"65","endLine":35,"endColumn":19,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":56,"column":7,"nodeType":"69","endLine":67,"endColumn":9},{"ruleId":"67","severity":1,"message":"68","line":11,"column":18,"nodeType":"69","endLine":11,"endColumn":50},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'web3' is assigned a value but never used.","Identifier","unusedVar","'account' is assigned a value but never used.","'balance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkForMatch'. Either include it or remove the dependency array.","ArrayExpression",["72"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [cardsChosen, checkForMatch]",{"range":"75","text":"76"},[1051,1064],"[cardsChosen, checkForMatch]"]